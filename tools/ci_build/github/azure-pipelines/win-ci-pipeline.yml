parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

stages:
- stage: x64_debug
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'Debug'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --build_java --build_nodejs --build_wheel --disable_memleak_checker
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_debug
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        isTraining: false
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        WITH_CACHE: true
        MachinePool: 'onnxruntime-Win-CPU-2019'

- stage: x64_release
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        # Compare to our Nuget packaging pipeline, this job has "--build_wheel" but doesn't have "--enable_lto --disable_rtti --use_telemetry  --enable_wcos"
        # Python bindings use typeid so I can't disable RTTI here. If it causes a problem, we will need to split this job to two jobs.
        additionalBuildFlags: --build_wheel --build_java --build_nodejs
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        isTraining: false
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        WITH_CACHE: true
        MachinePool: 'onnxruntime-Win-CPU-2019'

- stage: x64_release_dnnl
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --build_wheel --use_dnnl --build_java
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        isTraining: false
        ORT_EP_NAME: DNNL
        GenerateDocumentation: false
        WITH_CACHE: true
        # Intel EPs require Intel CPUs
        MachinePool: 'Win-CPU-2019'

# Tests doesn't work on AMD CPUs
- stage: x64_release_xnnpack
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --build_wheel --use_xnnpack
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_release
        RunOnnxRuntimeTests: false
        RunStaticCodeAnalysis: false
        isTraining: false
        ORT_EP_NAME: XNNPACK
        GenerateDocumentation: false
        WITH_CACHE: true
        MachinePool: 'onnxruntime-Win-CPU-2019'

- stage: x64_release_winml
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --use_winml --enable_wcos --disable_rtti
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_release_winml
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        # WinML has many warnings
        RunStaticCodeAnalysis: false
        EnablePython: false
        isTraining: false
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        WITH_CACHE: true
        MachinePool: 'onnxruntime-Win-CPU-2019'

- stage: x86_release
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env_x86.bat
        buildArch: x86
        additionalBuildFlags: --build_wheel
        msbuildPlatform: Win32
        isX86: true
        job_name_suffix: x86_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        isTraining: false
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        WITH_CACHE: true
        MachinePool: 'onnxruntime-Win-CPU-2019'

- stage: training_x64_debug
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'Debug'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --enable_training --build_wheel --disable_memleak_checker
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: training_x64_debug
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        isTraining: true
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        WITH_CACHE: true
        MachinePool: 'onnxruntime-Win2019-CPU-training'

- stage: training_x64_release
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --enable_training --build_wheel
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: training_x64_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: true
        isTraining: true
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        WITH_CACHE: true
        MachinePool: 'onnxruntime-Win2019-CPU-training-AMD'

- stage: ort_training_apis_x64_release
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --enable_training_apis
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: ort_training_apis_x64_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        EnablePython: false
        isTraining: true
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        WITH_CACHE: true
        MachinePool: 'onnxruntime-Win2019-CPU-training-AMD'
        
- stage: x64_cuda_SCA
  dependsOn: []
  jobs:
  - job: CUDA_SCA
    workspace:
      clean: all
    pool: 'onnxruntime-Win2022-Intel-CPU'
    timeoutInMinutes:  300
    steps:
    - checkout: self
      clean: true
      submodules: none

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true
        architecture: x64

    - template: templates/download-deps.yml

    - task: PythonScript@0
      displayName: 'Update deps.txt'
      inputs:
        scriptPath: $(Build.SourcesDirectory)/tools/ci_build/replace_urls_in_deps.py
        arguments: --new_dir $(Build.BinariesDirectory)/deps
        workingDirectory: $(Build.BinariesDirectory)
        
    - powershell: |
        azcopy.exe cp --recursive "https://lotusscus.blob.core.windows.net/models/cuda_sdk/v11.8" $(Agent.TempDirectory)

    - task: SDLNativeRules@3
      displayName: 'Run the PREfast SDL Native Rules for MSBuild'
      inputs:
        msBuildArchitecture: amd64
        setupCommandlines: 'python $(Build.SourcesDirectory)\tools\ci_build\build.py --config Debug --build_dir $(Build.SourcesDirectory)\b --skip_submodule_sync --build_csharp --update --parallel --cmake_generator "Visual Studio 17 2022" --build_shared_lib --enable_onnx_tests  --enable_pybind --use_cuda --cuda_home="$(Agent.TempDirectory)\v11.8" --enable_cuda_profiling --cmake_extra_defines CMAKE_CUDA_ARCHITECTURES=75 --cmake_extra_defines onnxruntime_ENABLE_STATIC_ANALYSIS=ON'
        msBuildCommandline: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\amd64\msbuild.exe" "$(Build.SourcesDirectory)\b\Debug\onnxruntime.sln" /p:RunCodeAnalysis=true /p:platform=x64 /p:configuration=Debug /p:VisualStudioVersion="17.0" /m /p:PreferredToolArchitecture=x64'
        excludedPaths: '$(Build.SourcesDirectory)\b#$(Build.SourcesDirectory)\cmake#C:\program files#C:\program files (x86)#$(Agent.TempDirectory)'
        rulesetName: Custom
        customRuleset: $(Build.SourcesDirectory)\cmake\Sdl.ruleset
        publishXML: true

    - task: SdtReport@2
      displayName: 'Create Security Analysis Report'
      inputs:
        SDLNativeRules: true

    - task: PublishSecurityAnalysisLogs@3
      displayName: 'Publish Security Analysis Logs'
      continueOnError: true

    - task: PostAnalysis@2
      displayName: 'Guardian Break v2'
      inputs:
        GdnBreakGdnToolSDLNativeRulesSeverity: Note
        GdnBreakGdnToolSDLNativeRules: true